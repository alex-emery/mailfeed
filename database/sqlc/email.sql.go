// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: email.sql

package sqlc

import (
	"context"
)

const createEmail = `-- name: CreateEmail :one
INSERT INTO
    email (
        id,
        date,
        recipient,
        sender,
        subject,
        description
    )
VALUES
    (?, ?, ?, ?, ?, ?) RETURNING id, date, recipient, sender, subject, description
`

type CreateEmailParams struct {
	ID          int64
	Date        string
	Recipient   string
	Sender      string
	Subject     string
	Description string
}

func (q *Queries) CreateEmail(ctx context.Context, arg CreateEmailParams) (Email, error) {
	row := q.db.QueryRowContext(ctx, createEmail,
		arg.ID,
		arg.Date,
		arg.Recipient,
		arg.Sender,
		arg.Subject,
		arg.Description,
	)
	var i Email
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Recipient,
		&i.Sender,
		&i.Subject,
		&i.Description,
	)
	return i, err
}

const getEmail = `-- name: GetEmail :one
SELECT
    id, date, recipient, sender, subject, description
FROM
    email
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetEmail(ctx context.Context, id int64) (Email, error) {
	row := q.db.QueryRowContext(ctx, getEmail, id)
	var i Email
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Recipient,
		&i.Sender,
		&i.Subject,
		&i.Description,
	)
	return i, err
}

const listEmails = `-- name: ListEmails :many
SELECT
    id, date, recipient, sender, subject, description
FROM
    email
ORDER BY
    date
`

func (q *Queries) ListEmails(ctx context.Context) ([]Email, error) {
	rows, err := q.db.QueryContext(ctx, listEmails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Email
	for rows.Next() {
		var i Email
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.Recipient,
			&i.Sender,
			&i.Subject,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
