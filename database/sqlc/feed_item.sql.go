// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: feed_item.sql

package sqlc

import (
	"context"
)

const createFeedItem = `-- name: CreateFeedItem :one
INSERT into
    feed_item(
        id, 
        name,
        feed_id,
        subject,
        body,
        date
        )
VALUES
    (?, ?, ?,?,?,?) RETURNING id, name, feed_id, subject, body, date
`

type CreateFeedItemParams struct {
	ID      string
	Name    string
	FeedID  string
	Subject string
	Body    string
	Date    string
}

func (q *Queries) CreateFeedItem(ctx context.Context, arg CreateFeedItemParams) (FeedItem, error) {
	row := q.db.QueryRowContext(ctx, createFeedItem,
		arg.ID,
		arg.Name,
		arg.FeedID,
		arg.Subject,
		arg.Body,
		arg.Date,
	)
	var i FeedItem
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.FeedID,
		&i.Subject,
		&i.Body,
		&i.Date,
	)
	return i, err
}

const getFeedItem = `-- name: GetFeedItem :one
SELECT
    id, name, feed_id, subject, body, date
FROM
    feed_item 
where
    id= ?
limit
    1
`

func (q *Queries) GetFeedItem(ctx context.Context, id string) (FeedItem, error) {
	row := q.db.QueryRowContext(ctx, getFeedItem, id)
	var i FeedItem
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.FeedID,
		&i.Subject,
		&i.Body,
		&i.Date,
	)
	return i, err
}

const listFeedItems = `-- name: ListFeedItems :many
SELECT
    id, name, feed_id, subject, body, date
FROM
    feed_item
WHERE
    feed_id = ?
`

func (q *Queries) ListFeedItems(ctx context.Context, feedID string) ([]FeedItem, error) {
	rows, err := q.db.QueryContext(ctx, listFeedItems, feedID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedItem
	for rows.Next() {
		var i FeedItem
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.FeedID,
			&i.Subject,
			&i.Body,
			&i.Date,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
